;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
(require 2htdp/image)
(require 2htdp/universe)

;Ejercicio 1
; Estado es un string, que representa el color del círculo a dibujar en pantalla.
; Posibles valores:
; - "blue"
; - "red"
; - "green"

; interpretar: Estado -> Image
; dado un estado, devuelve la imagen a mostrar por el programa
; (omitimos los ejemplos para faciltar la legibilidad)

(define INICIAL "blue")
(define
  (interpretar s)
  (place-image (circle 50 "solid" s) 100 100 (empty-scene 200 200)))

; manejarTeclado: Estado String -> Estado
(define (manejarTeclado s k) (cond [(key=? k "a") "blue"]
                                   [(key=? k "r") "red"]
                                   [(key=? k "v") "green"]
                                   [(key=? k "n") "black"]
                                   [(key=? k " ") INICIAL]
                                   [else s]))

(big-bang INICIAL ; estado inicial del sistema
  [to-draw interpretar] ; dibuja en la pantalla 
                        ; el círculo en el estado actual
  [on-key manejarTeclado])  ; cuando se presiona una tecla,
                            ; la función manejarTeclado
                            ; se invoca para manejar el evento)
;Ejercicio 2, 3, 3.1 
(define INICIOD 110)
(define INICIOI 10)
(define LARGO 300)
(define ANCHO 300)
(define CENTRO (/ 300 2))

; colorn : Number -> String
;Devuelve el color diferente dado un tamaño de la imagen
;si el numero esta entre 0 y 50 el color sera Amarillo
;si el numero esta entre 51 y 100 el color sera Rojo
;si el numero es mayor de 100 el color sera Verde

(define
  (colorn n)
  (cond
    [(and(<= 0 n)(<= n 50))"yellow"]
    [(and(< 50 n)(<= n 100))"red"]
    [else "green"]))

; Pantalla : Number -> Image
; transforma el estado del sistema en una imagen a mostrar a través
; de la cláusula to-draw
(define
  (pantalla n)
  (place-image (circle  n "outline" (colorn n))
               CENTRO CENTRO (empty-scene LARGO ANCHO)))

; teclado? : Number -> Number
;Toma el valor de un numero y lo multiplica por 10
;para incrementar o disminuir su tamaño

(define
  (teclado? n k)
  (cond
    [(string=? k "0") (* 10 0)]
    [(string=? k "1") (* 10 1)]
    [(string=? k "2") (* 10 2)]
    [(string=? k "3") (* 10 3)]
    [(string=? k "4") (* 10 4)]
    [(string=? k "5") (* 10 5)]
    [(string=? k "6") (* 10 6)]
    [(string=? k "7") (* 10 7)]
    [(string=? k "8") (* 10 8)]
    [(string=? k "9") (* 10 9)]
    [else n]))

; Decrementar : Number -> Number
; Devuelve el predecesor de un número positivo.
; Si el número es 0, devuelve 100. 
(define (decrementar n)
  (if (<= n 10)
      109
      (- n 5)))  

; Incrementar : Number -> Number
; suma uno a su argumento
(define (incrementar n)
  (if (>= n 110)
      9 
      (+ n 5)))

; end? : Number -> Number
; detiene la interaccion
;cuando el radio sea mayor de 110 o menor a 10
(define (end? n)
  (or (> n 110) (< n 10))) 

(big-bang INICIOI ; estado inicial del sistema
  [to-draw pantalla]
  ;[on-tick decrementar 1]
  [on-tick incrementar 1]
  [on-key teclado?]
  [stop-when end?]) 
 
;4
;representamos el movimiento de un cirlulo en un plano, dado una posicion en el plano
;El estado es un Number, que representa la posicion del círculo a dibujar en pantalla.
 
(define HEIGHT 300)
(define WIDTH 300)
(define RADIOI 20)
(define STARTX (/ WIDTH 2))
(define STARTY (/ HEIGHT 2))
(define CENTER (/ HEIGHT 2))

(define DELTA 10)

; creator : Event -> Number
; transforma el estado del sistema en una imagen a mostrar a través
; de la cláusula to-draw

(define
  (creator p)
  (place-image (circle RADIOI "solid" "green") STARTX p (empty-scene HEIGHT WIDTH)))


; upper : Number -> Number
; modifica restando la posicion vertical del circulo graficado en el plano,
;dependiendo del tamaño de la escena
(define (upper p)
  (if (> p RADIOI)
      (- p DELTA)
      p))


; lower : Number -> Number
; modifica sumando la posicion vertical del circulo graficado en el plano,
;dependiendo del tamaño de la escena
(define (lower p)
  (if (< p (- HEIGHT RADIOI))
      (+ p DELTA)
      p))

; movement Estado String -> Estado
; Toma un evento y una tecla para indicar la direccion del
; desplazamiento del circulo en el plano
(define (movement p k) (cond [(key=? k "up") (upper p)]
                             [(key=? k "down") (lower p)]
                             [(key=? k " ") STARTY]
                             [else p]))


(define (mouse-handler n x y event) (cond [(string=? event "button-down") y]
                                          [else n]))


(big-bang CENTER ; estado inicial del sistema
  [to-draw creator] ; dibuja en la pantalla 
                    ; y el círculo en el estado actual
  [on-key movement]; cuando se presiona una tecla,
                    ; la función movement
                    ; se invoca para modificar el evento
[on-mouse mouse-handler])


;5

(define INIT "yellow")
(define RADIUS 30)

; designer : Estado-> Image
; dado un estado, devuelve la imagen a mostrar
(define (designer t)
  (place-image (circle RADIUS "solid" t)
               CENTER
               CENTER
               (empty-scene HEIGHT WIDTH)))


; newcolor : String -> String
; dado un color, devuelve el siguiente color del cırculo
(define (newcolor t)
  (cond [(string=? t "yellow") "red"]
        [(string=? t "red") "green"]
        [(string=? t "green") "blue"]
        [(string=? t "blue") "yellow"]
        [else t]))

(big-bang INIT ; estado inicial
  [to-draw designer] ; evento obligatorio
  [on-tick newcolor 1])

;6
;representamos un mini editor de texto, el cual captura los valores de la tecla presionada
;y muestra esos valores en pantalla, ademas permite borrar caracteres al presionar backspace.

(require 2htdp/universe)
(define HEIGHTC 800)
(define WIDTHC 60)
(define CADENA "")

; drawer : Estado-> Image
; dado un estado, devuelve la imagen a mostrar
(define (drawer t)
  (place-image/align
   (text t 20 "indigo")
   0 0 "left" "top"
   (empty-scene HEIGHTC WIDTHC)))

; newtext : Estado String -> Image
; dado un Estado y un String, devuelve una imagen mostrando los valores de las teclas presionadas
(define (newtext t k)
  (cond
    [(string=? k "\b")
     (if (> (string-length t) 0)
         (substring t 0 (- (string-length t) 1))
         t)]
    [else (string-append t k)]))


(big-bang CADENA ; estado inicial
  [to-draw drawer] ; evento obligatorio
  [on-key newtext]) 

;7
; Representamos el desplazamiento de una imagen sobre un plano,
; la cual posee una posicion que puede ser modificada al presionar una tecla o presionar el mouse

(define AUTO (bitmap "C:/Users/aldai/OneDrive/UNR/Racket/car.png"))
(define LONGITUD 600)
(define ANCHURA 200)
(define LIMITED (- LONGITUD 60))
(define LIMITEI (+ LONGITUD 80))

(define INITIAL 60)

; screen : Estado -> Image
; Dado un estado, dibuja la imagen del auto en su posición correspondiente
(define (screen m)
  (place-image AUTO
               m (- ANCHURA 30)
               (place-image
                (rectangle LONGITUD 20 "solid" "black")
                (/ LONGITUD 2) (- ANCHURA 10)
               (empty-scene LONGITUD ANCHURA))))

; driver : Estado String -> Estado
; dado una tecla presionada, mueve el auto, lo reinicia o lo deja igual
(define (driver m k)
  (cond [(string=? k "right") (avanzar m)]
        [(string=? k "left") (retroceder m)]
        [(string=? k " ") INITIAL]))

; avanzar : Estado -> Estado
; Aumenta la posición del auto en X, hasta un límite derecho
(define (avanzar m)
  (if (>= m LIMITED)
      m  
      (+ m 40)))

; retroceder : Estado -> Estado
; Disminuye la posición del auto en X, hasta un límite izquierdo
(define (retroceder m)  
  (if (<= m 0)  
      m
      (- m 40)))

; manipulador : Estado Number Number String -> Estado
; al presionar el mouse, mueve el auto a la posición X del clic
(define (manipulador m x y event)
  (cond [(string=? event "button-down") x]
        [else m]))


(big-bang INITIAL
  [to-draw screen]
  [on-tick avanzar 0.5]
  [on-key driver]
  [on-mouse manipulador]
  )

;8


